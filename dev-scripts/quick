#!/usr/bin/env bash

## This script builds the Rancher server image exclusively, sans Dapper

set -eo pipefail
set -x

# variables
COMMIT=$(git rev-parse --short HEAD)
TAG="${TAG:-$(yq '.env.TAG | sub("-.*", "")' < .github/workflows/pull-request.yml)-${COMMIT}}-head"
OS="${OS:-linux}"
ARCH="${ARCH:-amd64}"
REPO="${REPO:-rancher}"
CATTLE_K3S_VERSION=$(grep -m1 'ENV CATTLE_K3S_VERSION' package/Dockerfile | awk '{print $3}')
CATTLE_KDM_BRANCH=$(grep -m1 'ARG CATTLE_KDM_BRANCH=' package/Dockerfile | cut -d '=' -f2)
CATTLE_RANCHER_WEBHOOK_VERSION=$(yq '.webhookVersion' < build.yaml)
CATTLE_REMOTEDIALER_PROXY_VERSION=$(yq '.remoteDialerProxyVersion' < build.yaml)
CATTLE_CSP_ADAPTER_MIN_VERSION=$(yq '.cspAdapterMinVersion' < build.yaml)
CATTLE_RANCHER_PROVISIONING_CAPI_VERSION=$(yq '.provisioningCAPIVersion' < build.yaml)
CATTLE_FLEET_VERSION=$(yq '.fleetVersion' < build.yaml)

# download airgap images and export it to a tarball
curl -Lf https://github.com/rancher/k3s/releases/download/"${CATTLE_K3S_VERSION}"/k3s-images.txt -o ./k3s-images.txt
AIRGAP_IMAGES=$(grep -e 'docker.io/rancher/mirrored-pause' -e 'docker.io/rancher/mirrored-coredns-coredns' ./k3s-images.txt)
xargs -n1 docker pull <<< "${AIRGAP_IMAGES}"
xargs -n2 docker save -o ./k3s-airgap-images.tar <<< "${AIRGAP_IMAGES}"

# download kontainer driver metadata
curl -sLf https://releases.rancher.com/kontainer-driver-metadata/"${CATTLE_KDM_BRANCH}"/data.json > ./data.json

BUILD_ARGS=""
BUILD_ARGS="$BUILD_ARGS --build-arg=VERSION=${TAG}"
BUILD_ARGS="$BUILD_ARGS --build-arg=ARCH=${ARCH}"
BUILD_ARGS="$BUILD_ARGS --build-arg=IMAGE_REPO=${REPO}"
BUILD_ARGS="$BUILD_ARGS --build-arg=COMMIT=${COMMIT}"
BUILD_ARGS="$BUILD_ARGS --build-arg=RKE_VERSION=${RKE_VERSION}"
BUILD_ARGS="$BUILD_ARGS --build-arg=CATTLE_RANCHER_WEBHOOK_VERSION=${CATTLE_RANCHER_WEBHOOK_VERSION}"
BUILD_ARGS="$BUILD_ARGS --build-arg=CATTLE_REMOTEDIALER_PROXY_VERSION=${CATTLE_REMOTEDIALER_PROXY_VERSION}"
BUILD_ARGS="$BUILD_ARGS --build-arg=CATTLE_RANCHER_PROVISIONING_CAPI_VERSION=${CATTLE_RANCHER_PROVISIONING_CAPI_VERSION}"
BUILD_ARGS="$BUILD_ARGS --build-arg=CATTLE_CSP_ADAPTER_MIN_VERSION=${CATTLE_CSP_ADAPTER_MIN_VERSION}"
BUILD_ARGS="$BUILD_ARGS --build-arg=CATTLE_FLEET_VERSION=${CATTLE_FLEET_VERSION}"
BUILD_ARGS="$BUILD_ARGS --build-arg=RANCHER_TAG=${TAG}"
BUILD_ARGS="$BUILD_ARGS --build-arg=RANCHER_REPO=${REPO}"

# because macos doesn't have realpath apparently
abs_path() {
  echo "$(cd "$(dirname "$1")" && pwd -P)/$(basename "$1")"
}

needs_workdir="false"

# add_context adds _some_ support for local replace directives of dependency.
add_context() {
  if ! replace=$(grep "$1 =>" go.mod); then
    return 0
  fi

  # Detect local replace directive or either form:
  #             github.com/rancher/steve => /absolute/or/relative/path/to/steve
  # or
  #     replace github.com/rancher/steve => /absolute/or/relative/path/to/steve
  if [ -z "$(echo "$replace" | cut -d= -f2 | cut -d' ' -f3)" ]; then
    godep=$(echo "$replace" | cut -d= -f2 | cut -d' ' -f2)
    path=$(abs_path "$godep")
    BUILD_ARGS="$BUILD_ARGS --build-context=$2=$path"
    BUILD_ARGS="$BUILD_ARGS --build-arg=$3=$2"
    BUILD_ARGS="$BUILD_ARGS --build-arg=$3_PATH=$path"
    needs_workdir="true"
  fi
}

add_context "github.com/rancher/remotedialer" "remotedialer-context" "GODEP_REMOTEDIALER"
add_context "github.com/rancher/shepherd" "shepherd-context" "GODEP_SHEPHERD"
add_context "github.com/rancher/steve" "steve-context" "GODEP_STEVE"
add_context "github.com/rancher/wrangler/v3" "wrangler-context" "GODEP_WRANGLER"

if [ "$needs_workdir" = "true" ]; then
  BUILD_ARGS="$BUILD_ARGS --build-arg=BUILD_WORKDIR=$PWD"
fi

if [ -z "$TARGET" ] || [ "$TARGET" = "server" ]; then
  # start the builds
  docker buildx build \
    $BUILD_ARGS \
    --tag "${REPO}"/rancher:"${TAG}" \
    --platform="${OS}/${ARCH}" \
    --target server \
    --file ./package/Dockerfile .

  if [ "$REPO" != "rancher" ]; then
    docker push "${REPO}"/rancher:"${TAG}" &
  fi
fi

if [ -z "$TARGET" ] || [ "$TARGET" = "agent" ]; then
  docker buildx build \
    $BUILD_ARGS \
    --tag "${REPO}"/rancher-agent:"${TAG}" \
    --platform="${OS}/${ARCH}" \
    --target agent \
    --file ./package/Dockerfile .

    if [ "$REPO" != "rancher" ]; then
      docker push "${REPO}"/rancher-agent:"${TAG}" &
    fi
fi

wait
