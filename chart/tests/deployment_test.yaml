suite: Test Deployment
templates:
- deployment.yaml
tests:
- it: should set --add-local=false
  set:
    addLocal: "false"
  asserts:
  - contains:
      path: spec.template.spec.containers[0].args
      content: "--add-local=false"
- it: should default to --add-local=true
  asserts:
  - contains:
      path: spec.template.spec.containers[0].args
      content: "--add-local=true"
- it: should add CATTLE_SYSTEM_DEFAULT_REGISTRY to env and maintain default vars
  set:
    systemDefaultRegistry: "registry.example.com"
    extraEnv:
    - name: CATTLE_TLS_MIN_VERSION
      value: "1.0"
  asserts:
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: CATTLE_SYSTEM_DEFAULT_REGISTRY
        value: "registry.example.com"
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: CATTLE_TLS_MIN_VERSION
        value: "1.0"
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: CATTLE_PEER_SERVICE
        value: RELEASE-NAME-rancher
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: CATTLE_NAMESPACE
        value: NAMESPACE
- it: should Just have default env vars
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env
      value:
      - name: CATTLE_NAMESPACE
        value: NAMESPACE
      - name: CATTLE_PEER_SERVICE
        value: RELEASE-NAME-rancher
- it: should default imagePullPolicy to IfNotPresent
  asserts:
  - equal:
      path: spec.template.spec.containers[0].imagePullPolicy
      value: IfNotPresent
- it: should override imagePullPolicy to Always
  set:
    rancherImagePullPolicy: Always
  asserts:
  - equal:
      path: spec.template.spec.containers[0].imagePullPolicy
      value: Always
- it: should set sidecar image as auditLog.image when auditLog.destination is sidecar and auditLog.level > 0
  set:
    auditLog:
      destination: sidecar
      level: 1
  asserts:
  - equal:
      path: spec.template.spec.containers[1].image
      value: rancher/mirrored-bci-micro:15.6.24.2
- it: should override auditLog.image.repository value when auditLog.destination is sidecar and auditLog.level > 0 and both auditLog.image.repository and auditLog.image.tag are set
  set:
    auditLog:
      destination: sidecar
      level: 1
      image:
        repository: my.private.repo:5000/rancher/busybox
        tag: 1.0.1
  asserts:
  - equal:
      path: spec.template.spec.containers[1].image
      value: my.private.repo:5000/rancher/busybox:1.0.1
- it: deprecated busyboxImage should override auditLog.image.repository image when auditLog.destination is sidecar and auditLog.level > 0 and auditLog.image.repository  and busyboxImage are set
  set:
    auditLog:
      destination: sidecar
      level: 1
      image:
        repository: my.private.repo:5000/rancher/busybox
        tag : 1.0.1
    busyboxImage: busybox
  asserts:
  - equal:
      path: spec.template.spec.containers[1].image
      value: busybox
- it: should override sidecar audit log imagePullPolicy when auditLog.destination is sidecar and auditLog.level > 0 and auditLog.imagePullPolicy is set
  set:
    auditLog:
      destination: sidecar
      level: 1
      image:
        pullPolicy: Never
  asserts:
  - equal:
      path: spec.template.spec.containers[1].imagePullPolicy
      value: Never
- it: deprecated busyboxImagePullPolicy should override sidecar audit log imagePullPolicy when auditLog.destination is sidecar, auditLog.level > 0, and busyboxImagePullPolicy and auditLog.imagePullPolicy are set
  set:
    auditLog:
      destination: sidecar
      level: 1
      image:
        pullPolicy: Never
    busyboxImagePullPolicy: Always
  asserts:
  - equal:
      path: spec.template.spec.containers[1].imagePullPolicy
      value: Always
- it: should not have command arg "--no-cacerts" when using private CA
  set:
    privateCA: "true"
  asserts:
  - notContains:
      path: spec.template.spec.containers[0].args
      content: "--no-cacerts"
- it: should not have command arg "--no-cacerts" when using default (rancher) ingress TLS
  set:
    tls: "ingress"
  asserts:
  - notContains:
      path: spec.template.spec.containers[0].args
      content: "--no-cacerts"
- it: should have command arg "--no-cacerts" when using letsEncrypt ingress TLS
  set:
    tls: "ingress"
    ingress.tls.source: "letsEncrypt"
  asserts:
  - contains:
      path: spec.template.spec.containers[0].args
      content: "--no-cacerts"
- it: should have command arg "--no-cacerts" when using external TLS
  set:
    tls: "external"
  asserts:
  - contains:
      path: spec.template.spec.containers[0].args
      content: "--no-cacerts"
- it: should add CATTLE_SYSTEM_CATALOG to env
  set:
    useBundledSystemChart: true
  asserts:
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: CATTLE_SYSTEM_CATALOG
        value: "bundled"
- it: should create custom-logos volume if customLogos.enabled and customLogos.volumeKind=persistentVolumeClaim using default volumeName
  set:
    customLogos.enabled: true
    customLogos.volumeKind: persistentVolumeClaim
  asserts:
  - contains:
      path: spec.template.spec.volumes
      content:
        name: custom-logos
        persistentVolumeClaim:
          claimName: RELEASE-NAME-rancher-custom-logos
- it: should create custom-logos volume customLogos.enabled and customLogos.volumeKind=persistentVolumeClaim using customLogos.volumeName
  set:
    customLogos.enabled: true
    customLogos.volumeKind: persistentVolumeClaim
    customLogos.volumeName: existing-pvc
  asserts:
  - contains:
      path: spec.template.spec.volumes
      content:
        name: custom-logos
        persistentVolumeClaim:
          claimName: existing-pvc
- it: should create custom-logos volume customLogos.enabled and customLogos.volumeKind=configMap using customLogos.volumeName
  set:
    customLogos.enabled: true
    customLogos.volumeKind: configMap
    customLogos.volumeName: existing-configMap
  asserts:
  - contains:
      path: spec.template.spec.volumes
      content:
        name: custom-logos
        configMap:
          name: existing-configMap
- it: should not create custom-logos volume if customLogos.enabled and customLogos.volumeKind=configMap but no customLogos.volumeName
  set:
    customLogos.enabled: true
    customLogos.volumeKind: configMap
  asserts:
  - isNullOrEmpty:
      path: spec.template.spec.volumes
- it: should not create custom-logos volume if not customLogos.enabled
  set:
    customLogos.enabled: false
  asserts:
  - isNullOrEmpty:
      path: spec.template.spec.volumes
- it: should mount custom-logos volume with default subpaths if customLogos.enabled and customLogos.volumeKind=persistentVolumeClaim
  set:
    customLogos.enabled: true
    customLogos.volumeKind: persistentVolumeClaim
  asserts:
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui/assets/images/logos
        name: custom-logos
        subPath: ember
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui-dashboard/dashboard/_nuxt/assets/images/pl
        name: custom-logos
        subPath: vue
- it: should mount custom-logos volume with default subpaths if customLogos.enabled and customLogos.volumeKind=persistentVolumeClaim and customLogos.volumeSubpaths.* blank 
  set:
    customLogos.enabled: true
    customLogos.volumeKind: persistentVolumeClaim
    customLogos.volumeSubpaths.emberUi: ""
    customLogos.volumeSubpaths.vueUi: ""
  asserts:
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui/assets/images/logos
        name: custom-logos
        subPath: ember
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui-dashboard/dashboard/_nuxt/assets/images/pl
        name: custom-logos
        subPath: vue
- it: should mount custom-logos volume with specified subpaths if customLogos.enabled and customLogos.volumeKind=persistentVolumeClaim
  set:
    customLogos.enabled: true
    customLogos.volumeKind: persistentVolumeClaim
    customLogos.volumeSubpaths.emberUi: test_ember
    customLogos.volumeSubpaths.vueUi: test_vue
  asserts:
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui/assets/images/logos
        name: custom-logos
        subPath: test_ember
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui-dashboard/dashboard/_nuxt/assets/images/pl
        name: custom-logos
        subPath: test_vue
- it: should mount custom-logos volume with default subpaths if customLogos.enabled and customLogos.volumeKind=persistentVolumeClaim and customLogos.volumeName
  set:
    customLogos.enabled: true
    customLogos.volumeKind: configMap
    customLogos.volumeName: existing-configMap
  asserts:
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui/assets/images/logos
        name: custom-logos
        subPath: ember
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui-dashboard/dashboard/_nuxt/assets/images/pl
        name: custom-logos
        subPath: vue
- it: should mount custom-logos volume with default subpaths if customLogos.enabled and customLogos.volumeKind=persistentVolumeClaim and customLogos.volumeName and customLogos.volumeSubpaths.* blank 
  set:
    customLogos.enabled: true
    customLogos.volumeKind: configMap
    customLogos.volumeName: existing-configMap
    customLogos.volumeSubpaths.emberUi: ""
    customLogos.volumeSubpaths.vueUi: ""
  asserts:
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui/assets/images/logos
        name: custom-logos
        subPath: ember
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui-dashboard/dashboard/_nuxt/assets/images/pl
        name: custom-logos
        subPath: vue
- it: should mount custom-logos volume with specified subpaths if customLogos.enabled and customLogos.volumeKind=persistentVolumeClaim and customLogos.volumeName
  set:
    customLogos.enabled: true
    customLogos.volumeKind: configMap
    customLogos.volumeName: existing-configMap
    customLogos.volumeSubpaths.emberUi: test_ember
    customLogos.volumeSubpaths.vueUi: test_vue
  asserts:
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui/assets/images/logos
        name: custom-logos
        subPath: test_ember
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        mountPath: /usr/share/rancher/ui-dashboard/dashboard/_nuxt/assets/images/pl
        name: custom-logos
        subPath: test_vue
- it: should not mount custom-logos volume if customLogos.enabled and customLogos.volumeKind=configMap but no customLogos.volumeName
  set:
    customLogos.enabled: true
    customLogos.volumeKind: configMap
  asserts:
  - isNullOrEmpty:
      path: spec.template.spec.containers[0].volumeMounts
- it: should not mount custom-logos volume if not customLogos.enabled
  set:
    customLogos.enabled: false
  asserts:
  - isNullOrEmpty:
      path: spec.template.spec.containers[0].volumeMounts
- it: should set priorityClassName=system-node-critical
  set:
    priorityClassName: "system-node-critical"
  asserts:
    - equal:
        path: spec.template.spec.priorityClassName
        value: "system-node-critical"
- it: should not set priorityClassName=system-node-critical
  set:
    priorityClassName: ""
  asserts:
    - isNullOrEmpty:
        path: spec.template.spec.priorityClassName
- it: should default priorityClassName="rancher-critical"
  asserts:
    - equal:
        path: spec.template.spec.priorityClassName
        value: "rancher-critical"
- it: should not set a livenessProbe initialDelaySeconds by default
  asserts:
    - notExists:
        path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
- it: should set livenessProbe periodSeconds defaults
  asserts:
    - equal:
        path: spec.template.spec.containers[0].livenessProbe.periodSeconds
        value: 30
    - equal:
        path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
        value: 5
    - equal:
        path: spec.template.spec.containers[0].livenessProbe.failureThreshold
        value: 5
- it: should not set readinessProbe initialDelaySeconds by default
  asserts:
    - notExists:
        path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
- it: should set readinessProbe periodSeconds defaults
  asserts:
    - equal:
        path: spec.template.spec.containers[0].readinessProbe.periodSeconds
        value: 30
    - equal:
        path: spec.template.spec.containers[0].readinessProbe.timeoutSeconds
        value: 5
    - equal:
        path: spec.template.spec.containers[0].readinessProbe.failureThreshold
        value: 5
- it: should set livenessProbe initialDelaySeconds to 90
  set:
    livenessProbe.initialDelaySeconds: 90
  asserts:
    - equal:
        path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
        value: 90
- it: should set livenessProbe periodSeconds to 60
  set:
    livenessProbe.periodSeconds: 60
  asserts:
    - equal:
        path: spec.template.spec.containers[0].livenessProbe.periodSeconds
        value: 60
- it: should set readinessProbe initialDelaySeconds to 20
  set:
    readinessProbe.initialDelaySeconds: 20
  asserts:
    - equal:
        path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
        value: 20
- it: should set readinessProbe periodSeconds to 60
  set:
    readinessProbe.periodSeconds: 60
  asserts:
    - equal:
        path: spec.template.spec.containers[0].readinessProbe.periodSeconds
        value: 60
- it: should always have a startupProbe
  asserts:
    - equal:
        path: spec.template.spec.containers[0].startupProbe.httpGet.port
        value: 80
    - equal:
        path: spec.template.spec.containers[0].startupProbe.httpGet.path
        value: /healthz
    - equal:
        path: spec.template.spec.containers[0].startupProbe.timeoutSeconds
        value: 5
    - equal:
        path: spec.template.spec.containers[0].startupProbe.failureThreshold
        value: 12
    - equal:
        path: spec.template.spec.containers[0].startupProbe.periodSeconds
        value: 10
- it: allows configuring startupProbe values
  set:
    startupProbe.timeoutSeconds: 2
    startupProbe.failureThreshold: 10
    startupProbe.periodSeconds: 15
  asserts:
    - equal:
        path: spec.template.spec.containers[0].startupProbe.timeoutSeconds
        value: 2
    - equal:
        path: spec.template.spec.containers[0].startupProbe.failureThreshold
        value: 10
    - equal:
        path: spec.template.spec.containers[0].startupProbe.periodSeconds
        value: 15
- it: should add CATTLE_AGENT_TLS_MODE=strict to env and maintain default vars
  set:
    agentTLSMode: "strict"
  asserts:
    - contains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_AGENT_TLS_MODE
          value: "strict"
    - contains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_PEER_SERVICE
          value: RELEASE-NAME-rancher
    - contains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_NAMESPACE
          value: NAMESPACE
- it: should add CATTLE_AGENT_TLS_MODE=system-store to env and maintain default vars
  set:
    agentTLSMode: "system-store"
  asserts:
    - contains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_AGENT_TLS_MODE
          value: "system-store"
    - contains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_PEER_SERVICE
          value: RELEASE-NAME-rancher
    - contains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_NAMESPACE
          value: NAMESPACE
- it: should not add (null) CATTLE_AGENT_TLS_MODE to env and maintain default vars
  set:
    agentTLSMode: null
  asserts:
    - notContains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_AGENT_TLS_MODE
          value: "strict"
    - notContains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_AGENT_TLS_MODE
          value: "system-store"
    - notContains:
            path: spec.template.spec.containers[0].env
            content:
              name: CATTLE_AGENT_TLS_MODE
              value: ""
    - notContains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_AGENT_TLS_MODE
          value: null
    - contains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_PEER_SERVICE
          value: RELEASE-NAME-rancher
    - contains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_NAMESPACE
          value: NAMESPACE
- it: should not add ("") CATTLE_AGENT_TLS_MODE to env and maintain default vars
  set:
    agentTLSMode: ""
  asserts:
    - notContains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_AGENT_TLS_MODE
          value: "strict"
    - notContains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_AGENT_TLS_MODE
          value: "system-store"
    - notContains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_AGENT_TLS_MODE
          value: ""
    - notContains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_AGENT_TLS_MODE
          value: null
    - contains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_PEER_SERVICE
          value: RELEASE-NAME-rancher
    - contains:
        path: spec.template.spec.containers[0].env
        content:
          name: CATTLE_NAMESPACE
          value: NAMESPACE
- it: sets extraTolerations
  set:
    extraTolerations:
      - key: "node.cloudprovider.kubernetes.io/uninitialized"
        value: "true"
        effect: "NoSchedule"
  asserts:
    - exists:
        path: spec.template.spec.tolerations[1]
