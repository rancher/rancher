#!/usr/bin/env bash

cd "$(dirname "$0")/.." || exit

source scripts/version

check_missing() {
  var=$1
  if [ -z "${!var}" ]; then
    >&2 echo "missing var $var"
    exit 1
  fi
}
#
# CHART_REPO_DIR=build/charts
#
# REGISTRY=${REGISTRY/:-""}
# IMAGE=${REGISTRY}${REPO}/rancher:${TAG}
# AGENT_IMAGE=${REPO}/rancher-agent:${AGENT_TAG}
# SYSTEM_AGENT_UPGRADE_TAG=$(grep "ENV CATTLE_SYSTEM_AGENT_VERSION" ../package/Dockerfile | awk -F'=' '{ print $NF }')-suc
# SYSTEM_AGENT_UPGRADE_IMAGE=${REPO}/system-agent:${SYSTEM_AGENT_UPGRADE_TAG}
# WINS_AGENT_UPGRADE_TAG=$(grep "ENV CATTLE_WINS_AGENT_VERSION" ../package/Dockerfile | awk -F'=' '{ print $NF }')
# WINS_AGENT_UPGRADE_IMAGE=${REPO}/wins:${WINS_AGENT_UPGRADE_TAG}
#
# # Query KDM data for RKE2 released versions where server args are defined.
# RKE2_RELEASE_VERSIONS=$(jq -r '[.rke2.releases[] | select(.serverArgs) | .version] | join(" ")' ../bin/data.json)
# # Convert versions with build metadata into valid image tags (replace + for -) and construct an array of tags.
# RKE2_RELEASE_TAGS=( $(echo $RKE2_RELEASE_VERSIONS | tr + -) )
# # Prefix image repo and name to tags.
# SYSTEM_AGENT_INSTALLER_RKE2_IMAGES=( "${RKE2_RELEASE_TAGS[@]/#/${REPO}/system-agent-installer-rke2:}" )
#
# # Query KDM data for K3S released versions where server args are defined.
# K3S_RELEASE_VERSIONS=$(jq -r '[.k3s.releases[] | select(.serverArgs) | .version] | join(" ")' ../bin/data.json)
# # Convert versions with build metadata into valid image tags (replace + for -) and construct an array of tags.
# K3S_RELEASE_TAGS=( $(echo $K3S_RELEASE_VERSIONS | tr + -) )
# # Prefix image repo and name to tags.
# SYSTEM_AGENT_INSTALLER_K3S_IMAGES=( "${K3S_RELEASE_TAGS[@]/#/${REPO}/system-agent-installer-k3s:}" )

export CATTLE_RANCHER_WEBHOOK_VERSION="108.0.0+up0.9.0-rc.7"
export CATTLE_REMOTEDIALER_PROXY_VERSION="106.0.1+up0.5.0"
export CATTLE_RANCHER_PROVISIONING_CAPI_VERSION="107.0.0+up0.8.0"
export CATTLE_RANCHER_TURTLES_VERSION="108.0.0+up0.25.0-rc.1"
export CATTLE_CSP_ADAPTER_MIN_VERSION="107.0.0+up7.0.0-rc.1"
export CATTLE_DEFAULT_SHELL_VERSION="rancher/shell:v0.5.0"
export CATTLE_FLEET_VERSION="108.0.0+up0.14.0-alpha.2"
export CATTLE_DEFAULT_SCC_OPERATOR_IMAGE="rancher/scc-operator:head"

export CATTLE_HELM_VERSION=$(grep -m1 'ENV CATTLE_HELM_VERSION=' package/Dockerfile | cut -d '=' -f2)
export CHART_DEFAULT_BRANCH=$(grep -m1 'ARG CHART_DEFAULT_BRANCH=' package/Dockerfile | cut -d '=' -f2)
export CATTLE_KDM_BRANCH=$(grep -m1 'ARG CATTLE_KDM_BRANCH=' package/Dockerfile | cut -d '=' -f2)
export CATTLE_K3S_VERSION=$(grep -m1 'ENV CATTLE_K3S_VERSION=' package/Dockerfile | cut -d '=' -f2)
export HELM_VERSION=$(grep -m1 'ENV HELM_VERSION=' package/Dockerfile.installer | cut -d '=' -f2)
export GO_VERSION=$(grep -m1 'golang:' package/Dockerfile | cut -d ':' -f2 | cut -d ' ' -f1)
export HELM_UNITTEST_VERSION=$(grep -m1 'ENV HELM_UNITTEST_VERSION=' Dockerfile.dapper | cut -d '=' -f2)

check_missing "CATTLE_HELM_VERSION"
check_missing "CATTLE_KDM_BRANCH"
check_missing "CHART_DEFAULT_BRANCH"
check_missing "CATTLE_K3S_VERSION"
check_missing "HELM_VERSION"
check_missing "GO_VERSION"
check_missing "HELM_UNITTEST_VERSION"
check_missing "ARCH"
check_missing "TAG"
