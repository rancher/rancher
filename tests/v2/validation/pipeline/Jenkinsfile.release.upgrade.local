#!groovy
node {
    def rootPath = "/root/go/src/github.com/rancher/rancher/"
    def workPath = "/root/go/src/github.com/rancher/rancher/tests/v2/validation/"

    def job_name = "${JOB_NAME}"
    if (job_name.contains('/')) { 
      job_names = job_name.split('/')
      job_name = job_names[job_names.size() - 1] 
    }

    def testContainer = "${job_name}${env.BUILD_NUMBER}_test"
    def buildTestContainer = "${job_name}${env.BUILD_NUMBER}-buildtest"
    def configGeneratorContainer = "${job_name}${env.BUILD_NUMBER}_generator"
    def cleanupTestContainer = "${job_name}${env.BUILD_NUMBER}_cleanup"

    def validationVolume = "ValidationSharedVolume-${job_name}${env.BUILD_NUMBER}"

    def imageName = "rancher-validation-${job_name}${env.BUILD_NUMBER}"

    def testsDir = "/root/go/src/github.com/rancher/rancher/tests/v2/validation/"
    def upgradeTestsDir = "${testsDir}upgrade"
    def provisioningTestsDir = "${testsDir}provisioning"

    def groovyEnvironments = "environments.groovy" 
    def configsDir = "cattle-configs"
    def patchedConfigsDir = "patched-cattle-configs"

    def testResultsOut = "results.xml"
    def testResultsJSON = "results.json"
    def envFile = ".env"
    def rancherConfig = "rancher_env.config"
    def qaseRun = "testrun"
    def testRunConfig = "testrunconfig.yaml"
    def testRancherVersions = "testrancherk8s.yaml"

    def config = env.CONFIG
    def filename = "config.yaml"
    def testRunID

    // rancher
    def rancherRepo = scm.getUserRemoteConfigs()[0].getUrl()
    if ("${env.REPO}" != "null" && "${env.REPO}" != "") {
      rancherRepo = "${env.REPO}"
    }
    def branch = "release/v2.8"
    if ("${env.BRANCH}" != "null" && "${env.BRANCH}" != "") {
      branch = "${env.BRANCH}"
    }

    // corral
    def corralBranch = "main"
    if ("${env.RANCHER_CORRAL_PACKAGES_REPO_BRANCH}" != "null" && "${env.RANCHER_CORRAL_PACKAGES_REPO_BRANCH}" != "") {
      corralBranch = "${env.RANCHER_CORRAL_PACKAGES_REPO_BRANCH}"
    }
    if (scm.getUserRemoteConfigs().size() > 1) {
      corralRepo = scm.getUserRemoteConfigs()[1].getUrl()
    }
    if ("${env.RANCHER_CORRAL_PACKAGES_REPO_URL}" != "null" && "${env.RANCHER_CORRAL_PACKAGES_REPO_URL}" != "") {
      corralRepo = "${env.RANCHER_CORRAL_PACKAGES_REPO_URL}"
    }


    def timeout = "60m"
    if ("${env.TIMEOUT}" != "null" && "${env.TIMEOUT}" != "") {
      timeout = "${env.TIMEOUT}" 
    }

    def cleanup = env.RANCHER_CLEANUP.toLowerCase()

    def localConfigFileName = ""
    def configFiles = []

    def defaultTag = "validation"

    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg':1]) {
      withFolderProperties {
        paramsMap = []
        params.each {
            if (it.key == "TEST_RUN_NAME") {
                def date = sh(script: "date +%Y-%m-%d", returnStdout: true).trim()
                def updatedTestRunName = "${it.value.trim()}-${date}"
                paramsMap << "$it.key=$updatedTestRunName"
            } else {
                paramsMap << "$it.key=$it.value"
            }
        }
        
        withCredentials([ string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                          string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                          string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'RANCHER_EKS_ACCESS_KEY'),
                          string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'RANCHER_EKS_SECRET_KEY'),
                          string(credentialsId: 'DO_ACCESSKEY', variable: 'DO_ACCESSKEY'),
                          string(credentialsId: 'AWS_SSH_PEM_KEY', variable: 'AWS_SSH_PEM_KEY'),
                          string(credentialsId: 'RANCHER_SSH_KEY', variable: 'RANCHER_SSH_KEY'),
                          string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'AZURE_SUBSCRIPTION_ID'),
                          string(credentialsId: 'AZURE_TENANT_ID', variable: 'AZURE_TENANT_ID'),
                          string(credentialsId: 'AZURE_CLIENT_ID', variable: 'AZURE_CLIENT_ID'),
                          string(credentialsId: 'AZURE_CLIENT_SECRET', variable: 'AZURE_CLIENT_SECRET'),
                          string(credentialsId: 'AZURE_AKS_SUBSCRIPTION_ID', variable: 'RANCHER_AKS_SUBSCRIPTION_ID'),
                          string(credentialsId: 'AZURE_TENANT_ID', variable: 'RANCHER_AKS_TENANT_ID'),
                          string(credentialsId: 'AZURE_CLIENT_ID', variable: 'RANCHER_AKS_CLIENT_ID'),
                          string(credentialsId: 'AZURE_CLIENT_SECRET', variable: 'RANCHER_AKS_SECRET_KEY'),
                          string(credentialsId: 'RANCHER_REGISTRY_USER_NAME', variable: 'RANCHER_REGISTRY_USER_NAME'),
                          string(credentialsId: 'RANCHER_REGISTRY_PASSWORD', variable: 'RANCHER_REGISTRY_PASSWORD'),
                          string(credentialsId: 'RANCHER_AD_SPECIAL_CHAR_PASSWORD', variable: 'RANCHER_AD_SPECIAL_CHAR_PASSWORD'),
                          string(credentialsId: 'ADMIN_PASSWORD', variable: 'ADMIN_PASSWORD'),
                          string(credentialsId: 'USER_PASSWORD', variable: 'USER_PASSWORD'),
                          string(credentialsId: 'RANCHER_GKE_CREDENTIAL', variable: 'RANCHER_GKE_CREDENTIAL'),
                          string(credentialsId: 'RANCHER_AUTH_USER_PASSWORD', variable: 'RANCHER_AUTH_USER_PASSWORD'),
                          string(credentialsId: 'RANCHER_HOSTNAME_OR_IP_ADDRESS', variable: 'RANCHER_HOSTNAME_OR_IP_ADDRESS'),
                          string(credentialsId: 'RANCHER_CA_CERTIFICATE', variable: 'RANCHER_CA_CERTIFICATE'),
                          string(credentialsId: 'RANCHER_SERVICE_ACCOUNT_NAME', variable: 'RANCHER_SERVICE_ACCOUNT_NAME'),
                          string(credentialsId: 'RANCHER_SERVICE_ACCOUNT_PASSWORD', variable: 'RANCHER_SERVICE_ACCOUNT_PASSWORD'),
                          string(credentialsId: 'RANCHER_USER_SEARCH_BASE', variable: 'RANCHER_USER_SEARCH_BASE'),
                          string(credentialsId: 'RANCHER_DEFAULT_LOGIN_DOMAIN', variable: 'RANCHER_DEFAULT_LOGIN_DOMAIN'),
                          string(credentialsId: 'RANCHER_OPENLDAP_SERVICE_ACCOUNT_NAME', variable: 'RANCHER_OPENLDAP_SERVICE_ACCOUNT_NAME'),
                          string(credentialsId: 'RANCHER_OPENLDAP_SERVICE_ACCOUNT_PASSWORD', variable: 'RANCHER_OPENLDAP_SERVICE_ACCOUNT_PASSWORD'),
                          string(credentialsId: 'RANCHER_OPENLDAP_USER_SEARCH_BASE', variable: 'RANCHER_OPENLDAP_USER_SEARCH_BASE'),
                          string(credentialsId: 'RANCHER_OPENLDAP_AUTH_USER_PASSWORD', variable: 'RANCHER_OPENLDAP_AUTH_USER_PASSWORD'),
                          string(credentialsId: 'RANCHER_OPENLDAP_HOSTNAME_OR_IP_ADDRESS', variable: 'RANCHER_OPENLDAP_HOSTNAME_OR_IP_ADDRESS'),
                          string(credentialsId: 'RANCHER_OPENLDAP_SPECIAL_CHAR_PASSWORD', variable: 'RANCHER_OPENLDAP_SPECIAL_CHAR_PASSWORD'),
                          string(credentialsId: 'RANCHER_FREEIPA_SERVICE_ACCOUNT_NAME', variable: 'RANCHER_FREEIPA_SERVICE_ACCOUNT_NAME'),
                          string(credentialsId: 'RANCHER_FREEIPA_SERVICE_ACCOUNT_PASSWORD', variable: 'RANCHER_FREEIPA_SERVICE_ACCOUNT_PASSWORD'),
                          string(credentialsId: 'RANCHER_FREEIPA_USER_SEARCH_BASE', variable: 'RANCHER_FREEIPA_USER_SEARCH_BASE'),
                          string(credentialsId: 'RANCHER_FREEIPA_GROUP_SEARCH_BASE', variable: 'RANCHER_FREEIPA_GROUP_SEARCH_BASE'),
                          string(credentialsId: 'RANCHER_FREEIPA_AUTH_USER_PASSWORD', variable: 'RANCHER_FREEIPA_AUTH_USER_PASSWORD'),
                          string(credentialsId: 'RANCHER_FREEIPA_HOSTNAME_OR_IP_ADDRESS', variable: 'RANCHER_FREEIPA_HOSTNAME_OR_IP_ADDRESS'),
                          string(credentialsId: 'RANCHER_FREEIPA_SPECIAL_CHAR_PASSWORD', variable: 'RANCHER_FREEIPA_SPECIAL_CHAR_PASSWORD'),
                          string(credentialsId: 'RANCHER_VALID_TLS_CERT', variable: 'RANCHER_VALID_TLS_CERT'),
                          string(credentialsId: 'RANCHER_VALID_TLS_KEY', variable: 'RANCHER_VALID_TLS_KEY'),
                          string(credentialsId: 'RANCHER_BYO_TLS_CERT', variable: 'RANCHER_BYO_TLS_CERT'),
                          string(credentialsId: 'RANCHER_BYO_TLS_KEY', variable: 'RANCHER_BYO_TLS_KEY'),
                          string(credentialsId: 'QASE_AUTOMATION_TOKEN', variable: 'QASE_AUTOMATION_TOKEN'),
                          string(credentialsId: 'RANCHER_LINODE_ACCESSKEY', variable: 'RANCHER_LINODE_ACCESSKEY')]) {
        withEnv(paramsMap) {
          stage('Checkout') {
            deleteDir()
            dir("./rancher") {
              checkout([
                      $class: 'GitSCM',
                      branches: [[name: "*/${branch}"]],
                      extensions: scm.extensions + [[$class: 'CleanCheckout']],
                      userRemoteConfigs: [[url: rancherRepo]]
                    ])
            }
            dir('./') {
              echo "cloning corral-packages repo"

              dir('./corral-packages') {
                checkout([
                      $class: 'GitSCM',
                      branches: [[name: "*/${corralBranch}"]],
                      extensions: scm.extensions + [[$class: 'CleanCheckout']],
                      userRemoteConfigs: [[url: corralRepo]]
                    ])
              }
            }
          }
          dir ("./") {
            try {
              stage('Configure and Build') {
                config = config.replace('${AWS_SECRET_ACCESS_KEY}', env.AWS_SECRET_ACCESS_KEY)
                config = config.replace('${AWS_ACCESS_KEY_ID}', env.AWS_ACCESS_KEY_ID)
                config = config.replace('${AWS_IAM_PROFILE}', env.AWS_IAM_PROFILE)
                config = config.replace('${AWS_REGION}', env.AWS_REGION)
                config = config.replace('${AWS_VPC}', env.AWS_VPC)
                config = config.replace('${AWS_SECURITY_GROUPS}', env.AWS_SECURITY_GROUPS)
                config = config.replace('${ADMIN_PASSWORD}', env.ADMIN_PASSWORD)
            
                if (env.AWS_SSH_PEM_KEY && env.AWS_SSH_KEY_NAME) {
                  dir("./rancher/tests/v2/validation/.ssh") {
                    def decoded = new String(AWS_SSH_PEM_KEY.decodeBase64())
                    writeFile file: AWS_SSH_KEY_NAME, text: decoded
                  }
                }

                try{
                  sh "docker build . -f ./rancher/tests/v2/validation/Dockerfile.e2e -t ${imageName}"
                  
                  sh "docker volume create --name ${validationVolume}"

                  sh "docker run -v ${validationVolume}:/root  --name ${buildTestContainer} -t " +
                  "${imageName} sh -c \"${workPath}pipeline/scripts/rancher_k8s_version.sh\""

                  sh "docker cp ${buildTestContainer}:/root/go/src/github.com/rancher/rancher/testrancherk8s.yaml ./"

                  if (sh(script: "test -s ./${testRancherVersions} && echo 'not_empty' || echo 'empty'", returnStdout: true).trim() == "empty") {
                      error "ERROR: (${testRancherVersions}) is empty or missing!"
                  }
                      
                 def rancherRKE2Version = sh(
                      script: "grep -E '^rancherRKE2Version:' ./${testRancherVersions} | awk '{print \$2}'",
                      returnStdout: true
                    ).trim()
                  println "Rancher RKE2 version ${rancherRKE2Version}"


                  def rancherRKE2VersionToUpgrade = sh(
                      script: "grep 'rancherRKE2VersionToUpgrade' ./${testRancherVersions} | awk '{print \$2}'",
                      returnStdout: true
                    ).trim()
                  println "Rancher RKE2 version to upgrade ${rancherRKE2VersionToUpgrade}"
                  
                  def rancherK3sVersion = sh(
                      script: "grep -E '^rancherK3sVersion:' ./${testRancherVersions} | awk '{print \$2}'",
                      returnStdout: true
                    ).trim()
                  println "Rancher K3s version ${rancherK3sVersion}"
                  
                  def rancherK3sVersionToUpgrade = sh(
                      script: "grep 'rancherK3sVersionToUpgrade' ./${testRancherVersions} | awk '{print \$2}'",
                      returnStdout: true
                    ).trim()
                  println "Rancher K3s version to upgrade ${rancherK3sVersionToUpgrade}"
                  
                  def rancherRKEVersion = sh(
                      script: "grep -E '^rancherRKEVersion:' ./${testRancherVersions} | awk '{print \$2}'",
                      returnStdout: true
                    ).trim()
                  println "Rancher RKE version ${rancherRKEVersion}"
                  
                  def rancherRKEVersionToUpgrade = sh(
                      script: "grep 'rancherRKEVersionToUpgrade' ./${testRancherVersions} | awk '{print \$2}'",
                      returnStdout: true
                    ).trim()
                  println "Rancher RKE version to upgrade ${rancherRKEVersionToUpgrade}"
                  
                  def rancherVersion = sh(
                      script: "grep 'rancherVersion:' ./${testRancherVersions} | awk '{print \$2}' | grep -v '^\$'",
                      returnStdout: true
                    ).trim()
                  println "Rancher rancher version ${rancherVersion}"
                  
                  def rancherImageTag = sh(
                      script: "grep 'rancherImageTag:' ./${testRancherVersions} | awk '{print \$2}' | grep -v '^\$'",
                      returnStdout: true
                    ).trim()
                  println "Rancher rancher image tag version ${rancherImageTag}"

                    config = config.replace('${RANCHER_VERSION}', rancherVersion)
                    config = config.replace('${RANCHER_IMAGE_TAG}', rancherImageTag)
                    config = config.replace('${RANCHER_RKE2_VERSION}', rancherRKE2Version)
                    config = config.replace('${RANCHER_RKE2_VERSION_TO_UPGRADE}', rancherRKE2VersionToUpgrade)
                    config = config.replace('${RANCHER_K3S_VERSION}', rancherK3sVersion)
                    config = config.replace('${RANCHER_K3S_VERSION_TO_UPGRADE}', rancherK3sVersionToUpgrade)
                    config = config.replace('${RANCHER_RKE1_VERSION}', rancherVersion)
                    config = config.replace('${RANCHER_RKE1_VERSION_TO_UPGRADE}', rancherRKEVersionToUpgrade)
                } catch (err) {
                  echo "Unable to get the versions of Rancher and Kubernetes: ${err}"
                  error "Rancher and k8s versions cannot be retrieved."
                  sh "docker stop ${buildTestContainer}"
                  sh "docker rm -v ${buildTestContainer}"
                  sh "docker volume rm -f ${validationVolume}"
                  sh "docker rmi ${imageName}"
                }
                sh "docker stop ${buildTestContainer}"
                sh "docker rm -v ${buildTestContainer}"
                sh "docker volume rm -f ${validationVolume}"
                sh "docker rmi ${imageName}"

                dir("./rancher/tests/v2/validation") {
                  writeFile file: filename, text: config
                  
                  env.CATTLE_TEST_CONFIG = workPath + filename
                }

                dir ("./") {
                  sh "./rancher/tests/v2/validation/configure.sh"
                  sh "docker build . -f ./rancher/tests/v2/validation/Dockerfile.e2e --build-arg CORRAL_VERSION=${env.CORRAL_VERSION} --build-arg RKE_VERSION=${env.RKE_VERSION} -t ${imageName}"
                  sh "docker volume create --name ${validationVolume}"
                }
              }
              stage('Setup') {
                sh returnStdout: true, script: 'wget -qO ./yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64'
                sh returnStdout:true, script: 'chmod a+x ./yq'
              }
              stage("Build Environment") {
                try {
                    
                  sh "docker run -v ${validationVolume}:/root --name ${buildTestContainer} -t --env-file ${envFile} " +
                  "${imageName} sh -c \"${workPath}pipeline/scripts/setup_environment.sh;${workPath}pipeline/scripts/build_qase_auto_testrun.sh\""

                  sh "docker cp ${buildTestContainer}:${workPath}${qaseRun} ./"
                  sh "./${qaseRun} --startRun=true"

                  testRunID = sh(
                      script: "./yq '.id'  ./${testRunConfig}",
                      returnStdout: true
                    ).trim()

                  if (testRunID != "null" && testRunID != "") {
                      echo "Extracted Test Run ID: '${testRunID}'"
                  } else {
                      echo "Failed to extract Test Run ID"
                  }

                } catch(err) {
                   sh "docker stop ${buildTestContainer}"
                   sh "docker rm -v ${buildTestContainer}"
                   sh "docker volume rm -f ${validationVolume}"
                   error "Build Environment had failures."
                }
              }
              stage ('Generate configuration files') {
                sh "docker run --volumes-from ${buildTestContainer} --name ${configGeneratorContainer} -t -e CATTLE_TEST_CONFIG=\$CATTLE_TEST_CONFIG " +
                  "${imageName} sh -c \"${workPath}pipeline/releaseupgrade/releaseupgrade.sh\""

                sh "docker cp ${configGeneratorContainer}:${rootPath}${configsDir}/ ."

                def configs = sh(script: "ls -1 ./${configsDir}", returnStdout: true).split()

                for (int i = 0; i < configs.size(); i++) {
                  def configName = configs[i]
                  if (configName.contains('local')) {
                    echo "skipping pushing local to the global variable"
                    localConfigFileName = "$configName"
                    continue
                  }
                  echo "pushing ${configName} to the global variable"
                  configFiles << "${configName}"
                }

                //copy local config file to patched dir to prevent any additional permission access
                dir("./${patchedConfigsDir}") {
                  sh "docker cp ${configGeneratorContainer}:${rootPath}${configsDir}/${localConfigFileName} ."
                }

                println "Building the image again with the config files"
                sh "./rancher/tests/v2/validation/configure.sh"
                sh "docker build . -f ./rancher/tests/v2/validation/Dockerfile.e2e -t ${imageName}" 
              }
             stage('Deploys clusters') {
              if ( configFiles.size() >= 1 ) {
                  try {
                   jobs = [:]

                   configFiles.each {
                     def configPath = "./${configsDir}/$it"
                     def absoluteConfigPath = "${rootPath}${configsDir}/$it"

                     def testCase = sh (
                       script: "./yq '.testCases.provisioningTestCase'  ${configPath}",
                       returnStdout: true
                     ).trim()

                     def testPackage = sh (
                       script: "./yq '.testCases.provisioningTestPackage'  ${configPath}",
                       returnStdout: true
                     ).trim()


                     jobs["$it-provisioning"] = { 
                       stage("Parallel Provisioning: $it"){
                         def containerName = "${job_name}${env.BUILD_NUMBER}_$it-provisioning"
                         try {
                             echo "Starting provisioning tests." 
                            sh "docker run --volumes-from ${buildTestContainer} --name ${containerName} -t -e CATTLE_TEST_CONFIG=\"${absoluteConfigPath}\" " +
                          "${imageName} sh -c \"gotestsum --format standard-verbose --packages=\"${testsDir}${testPackage}\" --junitfile ${testResultsJSON} -- -tags=validation ${testCase} -timeout=\"60m\" -v\""



                          dir("./${patchedConfigsDir}") {
                            sh "docker cp ${containerName}:${rootPath}${configsDir}/$it ."
                          }
                         } catch (err){
                           sh "docker stop ${containerName}"
                           sh "docker rm -v ${containerName}"
                         }

                         sh "docker stop ${containerName}"
                         sh "docker rm -v ${containerName}"
                       }
                     }
                  }

                  parallel jobs

                  } catch(err){
                    echo "Provisioning tests had failures: " + err
                  }
               } else {
                    echo "No downstream configuration found to provision"
               }
              }
              stage('Cluster names mapping') {
                if ( configFiles.size() >= 1 ) {
                  configFiles.each {
                    try{
                      sh (
                        script: "./yq -i '.upgradeInput.clusters[0].name = .rancher.clusterName' ./${patchedConfigsDir}/$it",
                        returnStdout: true
                      )
                    } catch(err){
                     echo "Cluster mapping had failures: " + err
                    }
                  }
                } else {
                  echo "No downstream configuration found to map cluster name"
                }

                echo "pushing ${localConfigFileName} to the global variable"
                configFiles << "${localConfigFileName}"

              }
              stage('Run preupgrade checks') {
                try {
                  jobs = [:]
                  configFiles.each {
                    try {
                      def configPath = "./${configsDir}/$it"
                      def configYaml = readFile(file: "./${patchedConfigsDir}/$it")

                      def testCase = sh (
                        script: "./yq '.testCases.preUpgradeTestCase'  ${configPath}",
                        returnStdout: true
                      ).trim()

                      def testPackage = sh (
                        script: "./yq '.testCases.upgradeTestCase'  ${configPath}",
                        returnStdout: true
                      ).trim()

                      def goValidationParams = [
                        string(name: 'TIMEOUT', value: "30m"),
                        text(name: 'CONFIG', value: configYaml),
                        string(name: 'REPO', value: "${rancherRepo}"),
                        string(name: 'BRANCH', value: "${branch}"),
                        string(name: 'TEST_PACKAGE', value: "${testPackage}"),
                        string(name: 'TAGS', value: "${defaultTag}"),
                        string(name: 'GOTEST_TESTCASE', value: "${testCase}"),
                        string(name: 'QASE_TEST_RUN_ID', value: "${testRunID}"),
                        string(name: 'RKE_VERSION', value: "${env.RKE_VERSION}")
                      ]

                      jobs["$it-preupgrade"] = { build job: 'go-automation-freeform-job', parameters: goValidationParams }
                    } catch(err) {
                      echo "Pre upgrade $it had failures: " + err
                    }
                  }

                  parallel jobs
                } catch(err) {
                  echo "Pre upgrade tests had failures: " + err
                }
              }

              stage('Upgrade local cluster version') {
                try {
                      def configPath = "./${configsDir}/${localConfigFileName}"
                      def configYaml = readFile(file: "./${patchedConfigsDir}/${localConfigFileName}")

                      def testCase = sh (
                        script: "./yq '.testCases.upgradeKubernetesTestCase'  ${configPath}",
                        returnStdout: true
                      ).trim()

                      def testPackage = sh (
                        script: "./yq '.testCases.upgradeTestCase'  ${configPath}",
                        returnStdout: true
                      ).trim()

                      def goValidationParams = [
                        string(name: 'TIMEOUT', value: "2h"),
                        text(name: 'CONFIG', value: configYaml),
                        string(name: 'REPO', value: "${rancherRepo}"),
                        string(name: 'BRANCH', value: "${branch}"),
                        string(name: 'TEST_PACKAGE', value: "${testPackage}"),
                        string(name: 'TAGS', value: "${defaultTag}"),
                        string(name: 'GOTEST_TESTCASE', value: "${testCase}" ),
                        string(name: 'QASE_TEST_RUN_ID', value: "${testRunID}"),
                        string(name: 'RKE_VERSION', value: "${env.RKE_VERSION}")
                      ]

                      build job: 'go-automation-freeform-job', parameters: goValidationParams
                } catch(err) {
                  echo "Kubernetes upgrade tests had failures: " + err
                }
              }
              stage('Run postupgrade checks') {
                try {
                  jobs = [:]

                  configFiles.each {
                    try {
                      def configPath = "./${configsDir}/$it"
                      def configYaml = readFile(file: "./${patchedConfigsDir}/$it")

                      def testCase = sh (
                        script: "./yq '.testCases.postUpgradeTestCase'  ${configPath}",
                        returnStdout: true
                      ).trim()

                      def testPackage = sh (
                        script: "./yq '.testCases.upgradeTestCase'  ${configPath}",
                        returnStdout: true
                      ).trim()

                      def goValidationParams = [
                        string(name: 'TIMEOUT', value: "30m"),
                        text(name: 'CONFIG', value: configYaml),
                        string(name: 'REPO', value: "${rancherRepo}"),
                        string(name: 'BRANCH', value: "${branch}"),
                        string(name: 'TEST_PACKAGE', value: "${testPackage}"),
                        string(name: 'TAGS', value: "${defaultTag}"),
                        string(name: 'GOTEST_TESTCASE', value: "${testCase}"),
                        string(name: 'QASE_TEST_RUN_ID', value: "${testRunID}"),
                        string(name: 'RKE_VERSION', value: "${env.RKE_VERSION}")
                      ]

                      jobs["$it-postupgrade"] = { build job: 'go-automation-freeform-job', parameters: goValidationParams }
                    } catch(err) {
                      echo "Post upgrade $it had failures: " + err
                    }
                  }
                  parallel jobs
                } catch(err){
                  echo "Post upgrade tests had failures: " + err
                }
                sh "./${qaseRun} --startRun=false"
              }
                stage('Delete Rancher and resources') {
                if (cleanup.toBoolean()) {
                  try{
                    sh 'echo Cleanup is enabled'

                    sh "docker run --volumes-from ${buildTestContainer} --name ${cleanupTestContainer} -t --env-file ${envFile} " +
                      "${imageName} sh -c \"${workPath}pipeline/scripts/rancher_cleanup.sh\""

                  } catch(err){
                    echo "Cleanup had failures: " + err
                    
                    if (sh(script: "docker inspect ${cleanupTestContainer} > /dev/null 2>&1 && echo 'exists' || echo 'not found'", returnStdout: true).trim() == 'exists') {
                        sh "docker stop ${cleanupTestContainer}"
                        sh "docker rm -v ${cleanupTestContainer}"
                    } else {
                        echo "Container ${cleanupTestContainer} not found, skipping cleanup."
                    }
                    
                    sh "docker rmi -f ${imageName}"
                  }
                } else {
                  sh 'echo Cleanup is disabled'
                }
              }
              stage('Test Report') {
                sh "docker stop ${buildTestContainer}"
                sh "docker rm -v ${buildTestContainer}"

                sh "docker stop ${configGeneratorContainer}"
                sh "docker rm -v ${configGeneratorContainer}"


                sh "docker rmi -f ${imageName}"
              }
            } catch(err) {           
              echo "Caught: ${err}"
              stage('Delete Rancher and resources in error') {
                if (cleanup.toBoolean()) {
                  try {
                    sh 'echo Cleanup is enabled'

                    sh "docker run --volumes-from ${buildTestContainer} --name ${cleanupTestContainer} -t --env-file ${envFile} " +
                      "${imageName} sh -c \"${workPath}pipeline/scripts/rancher_cleanup.sh\""

                  } catch(error) {
                    echo "Cleanup had failures: " + error
                    
                    if (sh(script: "docker inspect ${cleanupTestContainer} > /dev/null 2>&1 && echo 'exists' || echo 'not found'", returnStdout: true).trim() == 'exists') {
                        sh "docker stop ${cleanupTestContainer}"
                        sh "docker rm -v ${cleanupTestContainer}"
                    } else {
                        echo "Container ${cleanupTestContainer} not found, skipping cleanup."
                    }
                  }
                } else {
                  sh 'echo Cleanup is disabled'
                }
              }
                sh "docker stop ${buildTestContainer}"
                sh "docker rm -v ${buildTestContainer}"

                sh "docker stop ${configGeneratorContainer}"
                sh "docker rm -v ${configGeneratorContainer}"

                sh "docker rmi -f ${imageName}"
            } // catch error
          } // dir 
        } // withEnv
      } // creds
    } // folder properties
  } // wrap 
} // node