// Code generated by MockGen. DO NOT EDIT.
// Source: ../stores/passwordchangerequest/store.go
//
// Generated by this command:
//
//	mockgen -source=../stores/passwordchangerequest/store.go -destination=./passwordupdater.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPasswordUpdater is a mock of PasswordUpdater interface.
type MockPasswordUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordUpdaterMockRecorder
	isgomock struct{}
}

// MockPasswordUpdaterMockRecorder is the mock recorder for MockPasswordUpdater.
type MockPasswordUpdaterMockRecorder struct {
	mock *MockPasswordUpdater
}

// NewMockPasswordUpdater creates a new mock instance.
func NewMockPasswordUpdater(ctrl *gomock.Controller) *MockPasswordUpdater {
	mock := &MockPasswordUpdater{ctrl: ctrl}
	mock.recorder = &MockPasswordUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordUpdater) EXPECT() *MockPasswordUpdaterMockRecorder {
	return m.recorder
}

// UpdatePassword mocks base method.
func (m *MockPasswordUpdater) UpdatePassword(userId, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", userId, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockPasswordUpdaterMockRecorder) UpdatePassword(userId, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockPasswordUpdater)(nil).UpdatePassword), userId, newPassword)
}

// VerifyAndUpdatePassword mocks base method.
func (m *MockPasswordUpdater) VerifyAndUpdatePassword(userId, currentPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAndUpdatePassword", userId, currentPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAndUpdatePassword indicates an expected call of VerifyAndUpdatePassword.
func (mr *MockPasswordUpdaterMockRecorder) VerifyAndUpdatePassword(userId, currentPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndUpdatePassword", reflect.TypeOf((*MockPasswordUpdater)(nil).VerifyAndUpdatePassword), userId, currentPassword, newPassword)
}
