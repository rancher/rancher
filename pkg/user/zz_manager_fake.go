// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source=manager.go -destination=zz_manager_fake.go -package=user
//

// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	types "github.com/rancher/norman/types"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	gomock "go.uber.org/mock/gomock"
	types0 "k8s.io/apimachinery/pkg/types"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CheckAccess mocks base method.
func (m *MockManager) CheckAccess(accessMode string, allowedPrincipalIDs []string, userPrincipalID string, groups []v3.Principal) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", accessMode, allowedPrincipalIDs, userPrincipalID, groups)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockManagerMockRecorder) CheckAccess(accessMode, allowedPrincipalIDs, userPrincipalID, groups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockManager)(nil).CheckAccess), accessMode, allowedPrincipalIDs, userPrincipalID, groups)
}

// CreateNewUserClusterRoleBinding mocks base method.
func (m *MockManager) CreateNewUserClusterRoleBinding(userName string, userUID types0.UID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUserClusterRoleBinding", userName, userUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewUserClusterRoleBinding indicates an expected call of CreateNewUserClusterRoleBinding.
func (mr *MockManagerMockRecorder) CreateNewUserClusterRoleBinding(userName, userUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUserClusterRoleBinding", reflect.TypeOf((*MockManager)(nil).CreateNewUserClusterRoleBinding), userName, userUID)
}

// DeleteToken mocks base method.
func (m *MockManager) DeleteToken(tokenName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", tokenName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockManagerMockRecorder) DeleteToken(tokenName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockManager)(nil).DeleteToken), tokenName)
}

// EnsureClusterToken mocks base method.
func (m *MockManager) EnsureClusterToken(clusterName string, input TokenInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureClusterToken", clusterName, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureClusterToken indicates an expected call of EnsureClusterToken.
func (mr *MockManagerMockRecorder) EnsureClusterToken(clusterName, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureClusterToken", reflect.TypeOf((*MockManager)(nil).EnsureClusterToken), clusterName, input)
}

// EnsureToken mocks base method.
func (m *MockManager) EnsureToken(input TokenInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureToken", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureToken indicates an expected call of EnsureToken.
func (mr *MockManagerMockRecorder) EnsureToken(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureToken", reflect.TypeOf((*MockManager)(nil).EnsureToken), input)
}

// EnsureUser mocks base method.
func (m *MockManager) EnsureUser(principalName, displayName string) (*v3.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUser", principalName, displayName)
	ret0, _ := ret[0].(*v3.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureUser indicates an expected call of EnsureUser.
func (mr *MockManagerMockRecorder) EnsureUser(principalName, displayName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUser", reflect.TypeOf((*MockManager)(nil).EnsureUser), principalName, displayName)
}

// GetKubeconfigToken mocks base method.
func (m *MockManager) GetKubeconfigToken(clusterName, tokenName, description, kind, userName string, userPrincipal v3.Principal) (*v3.Token, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeconfigToken", clusterName, tokenName, description, kind, userName, userPrincipal)
	ret0, _ := ret[0].(*v3.Token)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKubeconfigToken indicates an expected call of GetKubeconfigToken.
func (mr *MockManagerMockRecorder) GetKubeconfigToken(clusterName, tokenName, description, kind, userName, userPrincipal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeconfigToken", reflect.TypeOf((*MockManager)(nil).GetKubeconfigToken), clusterName, tokenName, description, kind, userName, userPrincipal)
}

// GetUser mocks base method.
func (m *MockManager) GetUser(apiContext *types.APIContext) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", apiContext)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockManagerMockRecorder) GetUser(apiContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockManager)(nil).GetUser), apiContext)
}

// GetUserByPrincipalID mocks base method.
func (m *MockManager) GetUserByPrincipalID(principalName string) (*v3.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPrincipalID", principalName)
	ret0, _ := ret[0].(*v3.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPrincipalID indicates an expected call of GetUserByPrincipalID.
func (mr *MockManagerMockRecorder) GetUserByPrincipalID(principalName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPrincipalID", reflect.TypeOf((*MockManager)(nil).GetUserByPrincipalID), principalName)
}

// SetPrincipalOnCurrentUser mocks base method.
func (m *MockManager) SetPrincipalOnCurrentUser(apiContext *types.APIContext, principal v3.Principal) (*v3.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrincipalOnCurrentUser", apiContext, principal)
	ret0, _ := ret[0].(*v3.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPrincipalOnCurrentUser indicates an expected call of SetPrincipalOnCurrentUser.
func (mr *MockManagerMockRecorder) SetPrincipalOnCurrentUser(apiContext, principal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrincipalOnCurrentUser", reflect.TypeOf((*MockManager)(nil).SetPrincipalOnCurrentUser), apiContext, principal)
}

// SetPrincipalOnCurrentUserByUserID mocks base method.
func (m *MockManager) SetPrincipalOnCurrentUserByUserID(userID string, principal v3.Principal) (*v3.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrincipalOnCurrentUserByUserID", userID, principal)
	ret0, _ := ret[0].(*v3.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPrincipalOnCurrentUserByUserID indicates an expected call of SetPrincipalOnCurrentUserByUserID.
func (mr *MockManagerMockRecorder) SetPrincipalOnCurrentUserByUserID(userID, principal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrincipalOnCurrentUserByUserID", reflect.TypeOf((*MockManager)(nil).SetPrincipalOnCurrentUserByUserID), userID, principal)
}
