// Code generated by MockGen. DO NOT EDIT.
// Source: ../dialer.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=../dialer.go -destination=./dialer.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dialer "github.com/rancher/rancher/pkg/types/config/dialer"
	gomock "go.uber.org/mock/gomock"
	transport "k8s.io/client-go/transport"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// ClusterDialHolder mocks base method.
func (m *MockFactory) ClusterDialHolder(clusterName string, retryOnError bool) (*transport.DialHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDialHolder", clusterName, retryOnError)
	ret0, _ := ret[0].(*transport.DialHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterDialHolder indicates an expected call of ClusterDialHolder.
func (mr *MockFactoryMockRecorder) ClusterDialHolder(clusterName, retryOnError any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDialHolder", reflect.TypeOf((*MockFactory)(nil).ClusterDialHolder), clusterName, retryOnError)
}

// ClusterDialer mocks base method.
func (m *MockFactory) ClusterDialer(clusterName string, retryOnError bool) (dialer.Dialer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDialer", clusterName, retryOnError)
	ret0, _ := ret[0].(dialer.Dialer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterDialer indicates an expected call of ClusterDialer.
func (mr *MockFactoryMockRecorder) ClusterDialer(clusterName, retryOnError any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDialer", reflect.TypeOf((*MockFactory)(nil).ClusterDialer), clusterName, retryOnError)
}
