// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/auth/providers/oidc/oidc_provider.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=pkg/auth/providers/oidc/oidc_provider.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	types "github.com/rancher/norman/types"
	accessor "github.com/rancher/rancher/pkg/auth/accessor"
	v3 "github.com/rancher/rancher/pkg/generated/norman/management.cattle.io/v3"
	gomock "go.uber.org/mock/gomock"
)

// MocktokenManager is a mock of tokenManager interface.
type MocktokenManager struct {
	ctrl     *gomock.Controller
	recorder *MocktokenManagerMockRecorder
}

// MocktokenManagerMockRecorder is the mock recorder for MocktokenManager.
type MocktokenManagerMockRecorder struct {
	mock *MocktokenManager
}

// NewMocktokenManager creates a new mock instance.
func NewMocktokenManager(ctrl *gomock.Controller) *MocktokenManager {
	mock := &MocktokenManager{ctrl: ctrl}
	mock.recorder = &MocktokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenManager) EXPECT() *MocktokenManagerMockRecorder {
	return m.recorder
}

// CreateTokenAndSetCookie mocks base method.
func (m *MocktokenManager) CreateTokenAndSetCookie(userID string, userPrincipal v3.Principal, groupPrincipals []v3.Principal, providerToken string, ttl int, description string, request *types.APIContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokenAndSetCookie", userID, userPrincipal, groupPrincipals, providerToken, ttl, description, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTokenAndSetCookie indicates an expected call of CreateTokenAndSetCookie.
func (mr *MocktokenManagerMockRecorder) CreateTokenAndSetCookie(userID, userPrincipal, groupPrincipals, providerToken, ttl, description, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenAndSetCookie", reflect.TypeOf((*MocktokenManager)(nil).CreateTokenAndSetCookie), userID, userPrincipal, groupPrincipals, providerToken, ttl, description, request)
}

// GetSecret mocks base method.
func (m *MocktokenManager) GetSecret(userID, provider string, fallbackTokens []accessor.TokenAccessor) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", userID, provider, fallbackTokens)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MocktokenManagerMockRecorder) GetSecret(userID, provider, fallbackTokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MocktokenManager)(nil).GetSecret), userID, provider, fallbackTokens)
}

// IsMemberOf mocks base method.
func (m *MocktokenManager) IsMemberOf(token accessor.TokenAccessor, group v3.Principal) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberOf", token, group)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMemberOf indicates an expected call of IsMemberOf.
func (mr *MocktokenManagerMockRecorder) IsMemberOf(token, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberOf", reflect.TypeOf((*MocktokenManager)(nil).IsMemberOf), token, group)
}

// UpdateSecret mocks base method.
func (m *MocktokenManager) UpdateSecret(userID, provider, secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", userID, provider, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MocktokenManagerMockRecorder) UpdateSecret(userID, provider, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MocktokenManager)(nil).UpdateSecret), userID, provider, secret)
}

// UserAttributeCreateOrUpdate mocks base method.
func (m *MocktokenManager) UserAttributeCreateOrUpdate(userID, provider string, groupPrincipals []v3.Principal, userExtraInfo map[string][]string, loginTime ...time.Time) error {
	m.ctrl.T.Helper()
	varargs := []any{userID, provider, groupPrincipals, userExtraInfo}
	for _, a := range loginTime {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserAttributeCreateOrUpdate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserAttributeCreateOrUpdate indicates an expected call of UserAttributeCreateOrUpdate.
func (mr *MocktokenManagerMockRecorder) UserAttributeCreateOrUpdate(userID, provider, groupPrincipals, userExtraInfo any, loginTime ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{userID, provider, groupPrincipals, userExtraInfo}, loginTime...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAttributeCreateOrUpdate", reflect.TypeOf((*MocktokenManager)(nil).UserAttributeCreateOrUpdate), varargs...)
}
