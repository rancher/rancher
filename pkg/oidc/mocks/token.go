// Code generated by MockGen. DO NOT EDIT.
// Source: ../provider/token.go
//
// Generated by this command:
//
//	mockgen -source=../provider/token.go -destination=./token.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	rsa "crypto/rsa"
	reflect "reflect"

	session "github.com/rancher/rancher/pkg/oidc/provider/session"
	gomock "go.uber.org/mock/gomock"
)

// MocksessionGetterRemover is a mock of sessionGetterRemover interface.
type MocksessionGetterRemover struct {
	ctrl     *gomock.Controller
	recorder *MocksessionGetterRemoverMockRecorder
	isgomock struct{}
}

// MocksessionGetterRemoverMockRecorder is the mock recorder for MocksessionGetterRemover.
type MocksessionGetterRemoverMockRecorder struct {
	mock *MocksessionGetterRemover
}

// NewMocksessionGetterRemover creates a new mock instance.
func NewMocksessionGetterRemover(ctrl *gomock.Controller) *MocksessionGetterRemover {
	mock := &MocksessionGetterRemover{ctrl: ctrl}
	mock.recorder = &MocksessionGetterRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksessionGetterRemover) EXPECT() *MocksessionGetterRemoverMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MocksessionGetterRemover) Get(code string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", code)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MocksessionGetterRemoverMockRecorder) Get(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MocksessionGetterRemover)(nil).Get), code)
}

// Remove mocks base method.
func (m *MocksessionGetterRemover) Remove(code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MocksessionGetterRemoverMockRecorder) Remove(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MocksessionGetterRemover)(nil).Remove), code)
}

// MocksigningKeyGetter is a mock of signingKeyGetter interface.
type MocksigningKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *MocksigningKeyGetterMockRecorder
	isgomock struct{}
}

// MocksigningKeyGetterMockRecorder is the mock recorder for MocksigningKeyGetter.
type MocksigningKeyGetterMockRecorder struct {
	mock *MocksigningKeyGetter
}

// NewMocksigningKeyGetter creates a new mock instance.
func NewMocksigningKeyGetter(ctrl *gomock.Controller) *MocksigningKeyGetter {
	mock := &MocksigningKeyGetter{ctrl: ctrl}
	mock.recorder = &MocksigningKeyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksigningKeyGetter) EXPECT() *MocksigningKeyGetterMockRecorder {
	return m.recorder
}

// GetPublicKey mocks base method.
func (m *MocksigningKeyGetter) GetPublicKey(kid string) (*rsa.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", kid)
	ret0, _ := ret[0].(*rsa.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MocksigningKeyGetterMockRecorder) GetPublicKey(kid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MocksigningKeyGetter)(nil).GetPublicKey), kid)
}

// GetSigningKey mocks base method.
func (m *MocksigningKeyGetter) GetSigningKey() (*rsa.PrivateKey, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSigningKey")
	ret0, _ := ret[0].(*rsa.PrivateKey)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSigningKey indicates an expected call of GetSigningKey.
func (mr *MocksigningKeyGetterMockRecorder) GetSigningKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningKey", reflect.TypeOf((*MocksigningKeyGetter)(nil).GetSigningKey))
}
