// Code generated by MockGen. DO NOT EDIT.
// Source: ../provider/authorize.go
//
// Generated by this command:
//
//	mockgen -source=../provider/authorize.go -destination=./authorize.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	session "github.com/rancher/rancher/pkg/oidc/provider/session"
	gomock "go.uber.org/mock/gomock"
)

// MockcodeCreator is a mock of codeCreator interface.
type MockcodeCreator struct {
	ctrl     *gomock.Controller
	recorder *MockcodeCreatorMockRecorder
	isgomock struct{}
}

// MockcodeCreatorMockRecorder is the mock recorder for MockcodeCreator.
type MockcodeCreatorMockRecorder struct {
	mock *MockcodeCreator
}

// NewMockcodeCreator creates a new mock instance.
func NewMockcodeCreator(ctrl *gomock.Controller) *MockcodeCreator {
	mock := &MockcodeCreator{ctrl: ctrl}
	mock.recorder = &MockcodeCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcodeCreator) EXPECT() *MockcodeCreatorMockRecorder {
	return m.recorder
}

// GenerateCode mocks base method.
func (m *MockcodeCreator) GenerateCode() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCode")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCode indicates an expected call of GenerateCode.
func (mr *MockcodeCreatorMockRecorder) GenerateCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCode", reflect.TypeOf((*MockcodeCreator)(nil).GenerateCode))
}

// MocksessionAdder is a mock of sessionAdder interface.
type MocksessionAdder struct {
	ctrl     *gomock.Controller
	recorder *MocksessionAdderMockRecorder
	isgomock struct{}
}

// MocksessionAdderMockRecorder is the mock recorder for MocksessionAdder.
type MocksessionAdderMockRecorder struct {
	mock *MocksessionAdder
}

// NewMocksessionAdder creates a new mock instance.
func NewMocksessionAdder(ctrl *gomock.Controller) *MocksessionAdder {
	mock := &MocksessionAdder{ctrl: ctrl}
	mock.recorder = &MocksessionAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksessionAdder) EXPECT() *MocksessionAdderMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MocksessionAdder) Add(code string, session session.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", code, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MocksessionAdderMockRecorder) Add(code, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MocksessionAdder)(nil).Add), code, session)
}
