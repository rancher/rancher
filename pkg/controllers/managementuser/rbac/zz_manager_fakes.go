// Code generated by MockGen. DO NOT EDIT.
// Source: handler_base.go
//
// Generated by this command:
//
//	mockgen -source handler_base.go -destination=zz_manager_fakes.go -package=rbac
//

// Package rbac is a generated GoMock package.
package rbac

import (
	reflect "reflect"

	v3 "github.com/rancher/rancher/pkg/generated/norman/management.cattle.io/v3"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/rbac/v1"
)

// MockmanagerInterface is a mock of managerInterface interface.
type MockmanagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerInterfaceMockRecorder
	isgomock struct{}
}

// MockmanagerInterfaceMockRecorder is the mock recorder for MockmanagerInterface.
type MockmanagerInterfaceMockRecorder struct {
	mock *MockmanagerInterface
}

// NewMockmanagerInterface creates a new mock instance.
func NewMockmanagerInterface(ctrl *gomock.Controller) *MockmanagerInterface {
	mock := &MockmanagerInterface{ctrl: ctrl}
	mock.recorder = &MockmanagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmanagerInterface) EXPECT() *MockmanagerInterfaceMockRecorder {
	return m.recorder
}

// deleteServiceAccountImpersonator mocks base method.
func (m *MockmanagerInterface) deleteServiceAccountImpersonator(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteServiceAccountImpersonator", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteServiceAccountImpersonator indicates an expected call of deleteServiceAccountImpersonator.
func (mr *MockmanagerInterfaceMockRecorder) deleteServiceAccountImpersonator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteServiceAccountImpersonator", reflect.TypeOf((*MockmanagerInterface)(nil).deleteServiceAccountImpersonator), arg0)
}

// ensureClusterBindings mocks base method.
func (m *MockmanagerInterface) ensureClusterBindings(arg0 map[string]*v3.RoleTemplate, arg1 *v3.ClusterRoleTemplateBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ensureClusterBindings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ensureClusterBindings indicates an expected call of ensureClusterBindings.
func (mr *MockmanagerInterfaceMockRecorder) ensureClusterBindings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ensureClusterBindings", reflect.TypeOf((*MockmanagerInterface)(nil).ensureClusterBindings), arg0, arg1)
}

// ensureGlobalResourcesRolesForPRTB mocks base method.
func (m *MockmanagerInterface) ensureGlobalResourcesRolesForPRTB(arg0 string, arg1 map[string]*v3.RoleTemplate) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ensureGlobalResourcesRolesForPRTB", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ensureGlobalResourcesRolesForPRTB indicates an expected call of ensureGlobalResourcesRolesForPRTB.
func (mr *MockmanagerInterfaceMockRecorder) ensureGlobalResourcesRolesForPRTB(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ensureGlobalResourcesRolesForPRTB", reflect.TypeOf((*MockmanagerInterface)(nil).ensureGlobalResourcesRolesForPRTB), arg0, arg1)
}

// ensureProjectRoleBindings mocks base method.
func (m *MockmanagerInterface) ensureProjectRoleBindings(arg0 string, arg1 map[string]*v3.RoleTemplate, arg2 *v3.ProjectRoleTemplateBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ensureProjectRoleBindings", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ensureProjectRoleBindings indicates an expected call of ensureProjectRoleBindings.
func (mr *MockmanagerInterfaceMockRecorder) ensureProjectRoleBindings(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ensureProjectRoleBindings", reflect.TypeOf((*MockmanagerInterface)(nil).ensureProjectRoleBindings), arg0, arg1, arg2)
}

// ensureRoles mocks base method.
func (m *MockmanagerInterface) ensureRoles(arg0 map[string]*v3.RoleTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ensureRoles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ensureRoles indicates an expected call of ensureRoles.
func (mr *MockmanagerInterfaceMockRecorder) ensureRoles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ensureRoles", reflect.TypeOf((*MockmanagerInterface)(nil).ensureRoles), arg0)
}

// ensureServiceAccountImpersonator mocks base method.
func (m *MockmanagerInterface) ensureServiceAccountImpersonator(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ensureServiceAccountImpersonator", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ensureServiceAccountImpersonator indicates an expected call of ensureServiceAccountImpersonator.
func (mr *MockmanagerInterfaceMockRecorder) ensureServiceAccountImpersonator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ensureServiceAccountImpersonator", reflect.TypeOf((*MockmanagerInterface)(nil).ensureServiceAccountImpersonator), arg0)
}

// gatherRoles mocks base method.
func (m *MockmanagerInterface) gatherRoles(arg0 *v3.RoleTemplate, arg1 map[string]*v3.RoleTemplate, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "gatherRoles", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// gatherRoles indicates an expected call of gatherRoles.
func (mr *MockmanagerInterfaceMockRecorder) gatherRoles(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "gatherRoles", reflect.TypeOf((*MockmanagerInterface)(nil).gatherRoles), arg0, arg1, arg2)
}

// noRemainingOwnerLabels mocks base method.
func (m *MockmanagerInterface) noRemainingOwnerLabels(arg0 *v1.ClusterRoleBinding) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "noRemainingOwnerLabels", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// noRemainingOwnerLabels indicates an expected call of noRemainingOwnerLabels.
func (mr *MockmanagerInterfaceMockRecorder) noRemainingOwnerLabels(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "noRemainingOwnerLabels", reflect.TypeOf((*MockmanagerInterface)(nil).noRemainingOwnerLabels), arg0)
}

// reconcileProjectAccessToGlobalResources mocks base method.
func (m *MockmanagerInterface) reconcileProjectAccessToGlobalResources(arg0 *v3.ProjectRoleTemplateBinding, arg1 []string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "reconcileProjectAccessToGlobalResources", arg0, arg1)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// reconcileProjectAccessToGlobalResources indicates an expected call of reconcileProjectAccessToGlobalResources.
func (mr *MockmanagerInterfaceMockRecorder) reconcileProjectAccessToGlobalResources(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "reconcileProjectAccessToGlobalResources", reflect.TypeOf((*MockmanagerInterface)(nil).reconcileProjectAccessToGlobalResources), arg0, arg1)
}
