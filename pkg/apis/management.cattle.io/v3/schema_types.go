package v3

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:scope=Cluster

// DynamicSchema is the definition of a schema. Dynamic schemas are
// created and used internally by Rancher to generate CRDs and API
// endpoints, and should not be created manually.
//
// Functionality for generating Rancher dynamic API endpoints is
// limited. These endpoints are not backed by any Norman stores, and
// most related fields will not have any useful effect.
// ---
// DynamicSchema is used by Rancher for generating dynamic
// provisioning and CAPI CRDs for Rancher node drivers: the machine
// pool configuration CRD, the InfrastructureMachineTemplate CRD, and
// the InfrastructureMachine CRD. Dynamic schemas are generated by
// Rancher from node and cluster drivers.
//
// It is also used by Rancher to generate meta-schemas that list node
// driver, kontainer driver, and credential config schemas as fields
// in the schema (see the "nodeconfig", "nodetemplateconfig",
// "cluster" and "credentialconfig" schemas). Some of these are used
// by the UI.
//
// The schemas themselves become available in the Norman API under
// /v3/schemas, but don't define any resources that can be used with
// the Norman API.
type DynamicSchema struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// Specification of the desired behavior of the the dynamic schema. More info:
	// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec DynamicSchemaSpec `json:"spec"`
	// Most recent observed status of the dynamic schema. More info:
	// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Status DynamicSchemaStatus `json:"status"`
}

type DynamicSchemaSpec struct {
	// SchemaName is the id under which the schema will be registered in the
	// Norman API. If unset, the dynamic schema resource name will be used.
	// +optional
	SchemaName string `json:"schemaName,omitempty"`

	// Embed determines whether the ResourceFields of this schema should be
	// embedded into another schema (EmbedType).
	// +optional
	Embed bool `json:"embed,omitempty"`

	// EmbedType defines the schema into which the ResourceFields of this
	// schema should be embedded in.
	// +optional
	EmbedType string `json:"embedType,omitempty"`

	// PluralName has no useful effects and should not be set.
	// +optional
	PluralName string `json:"pluralName,omitempty"`

	// ResourceMethods has no useful effects and should not be set.
	// +optional
	ResourceMethods []string `json:"resourceMethods,omitempty"`

	// ResourceFields defines the schema fields and their types.
	// +optional
	// ---
	// These are populated by Rancher to define which fields are supported
	// by a given node or kontainer driver. They are also used and for
	// listing other schemas (see the "cluster", "nodeconfig",
	// "nodetemplateconfig" and "credentialconfig" generated schemas).
	ResourceFields map[string]Field `json:"resourceFields,omitempty"`

	// ResourceActions has no useful effects and should not be set.
	// +optional
	ResourceActions map[string]Action `json:"resourceActions,omitempty"`

	// CollectionMethods has no useful effects and should not be set.
	// +optional
	CollectionMethods []string `json:"collectionMethods,omitempty"`

	// CollectionFields has no useful effects and should not be set.
	// +optional
	CollectionFields map[string]Field `json:"collectionFields,omitempty"`

	// CollectionActions has no useful effects and should not be set.
	// +optional
	CollectionActions map[string]Action `json:"collectionActions,omitempty"`

	// CollectionFilters has no useful effects and should not be set.
	// +optional
	CollectionFilters map[string]Filter `json:"collectionFilters,omitempty"`

	// IncludeableLinks has no useful effects and should not be set.
	// +optional
	IncludeableLinks []string `json:"includeableLinks,omitempty"`

	// DynamicSchemaVersion has no useful effects and should not be set.
	// +optional
	DynamicSchemaVersion string `json:"dynamicSchemaVersion,omitempty"`
}

type DynamicSchemaStatus struct {
	// Fake has no useful effects and should not be set.
	// +optional
	Fake string `json:"fake,omitempty"`
}

type Field struct {
	// Type is the type of the field. Possible types are "string",
	// "password", "boolean", "int", "array[string]" or another schema
	// name.
	// +optional
	Type string `json:"type,omitempty"`

	// Default is the default value for the field.
	// +optional
	Default Values `json:"default,omitempty"`

	// Unique has no useful effects and should not be set.
	// +optional
	Unique bool `json:"unique,omitempty"`

	// Nullable indicates whether the field can take a null value in a valid
	// object of a schema with this field.
	//
	// The Norman API will reject null values for non-nullable fields, and
	// nullable is also used to determine if a field in a CRD derived from
	// this schema will be nullable.
	// +optional
	Nullable bool `json:"nullable,omitempty"`

	// Create indicates that this field should not be set when creating a
	// new object of a schema with this field through the Norman API.  A
	// value for this field will be filtered out if present in the create
	// request.
	// +optional
	Create bool `json:"create,omitempty"`

	// Required indicates that this field is required when creating a new
	// object of a schema with this field through the Norman API.
	// +optional
	Required bool `json:"required,omitempty"`

	// Update indicates that this field should not be modified when updating
	// an object of a schema with this field through the Norman API. A value
	// for this field will be filtered out if present in the update request.
	// +optional
	Update bool `json:"update,omitempty"`

	// MinLength has no useful effects and should not be set.
	// +optional
	MinLength int64 `json:"minLength,omitempty"`

	// MaxLength has no useful effects and should not be set.
	// +optional
	MaxLength int64 `json:"maxLength,omitempty"`

	// Min has no useful effects and should not be set.
	// +optional
	Min int64 `json:"min,omitempty"`

	// Max has no useful effects and should not be set.
	// +optional
	Max int64 `json:"max,omitempty"`

	// Options has no useful effects and should not be set.
	// +optional
	Options []string `json:"options,omitempty"`

	// ValidChars has no useful effects and should not be set.
	// +optional
	ValidChars string `json:"validChars,omitempty"`

	// InvalidChars has no useful effects and should not be set.
	// +optional
	InvalidChars string `json:"invalidChars,omitempty"`

	// Description is the description of this field.
	// +optional
	// ---
	// This is used to generate descriptions for CRDs derived from the
	// schema.
	Description string `json:"description,omitempty"`

	// DynamicField indicates this field should be removed from a schema
	// when embedding another schema into it.
	// +optional
	DynamicField bool `json:"dynamicField,omitempty"`
}

// Values defines a default value for a Field. The value field will
// be selected according to the Type of the Field.
type Values struct {
	// StringValue is the default value for a Field of "string" or
	// "password" type.
	// +optional
	StringValue string `json:"stringValue"`
	// IntValue is the default value for a Field of "int" type.
	// +optional
	IntValue int `json:"intValue"`
	// BoolValue is the default value for a Field of "bool" type.
	// +optional
	BoolValue bool `json:"boolValue"`
	// StringSliceValue is the default value for a Field of "array[string]"
	// type.
	// +optional
	// +nullable
	StringSliceValue []string `json:"stringSliceValue"`
}

type Action struct {
	// Input has no useful effects and should not be set.
	// +optional
	Input string `json:"input,omitempty"`

	// Output has no useful effects and should not be set.
	// +optional
	Output string `json:"output,omitempty"`
}

type Filter struct {
	// Modifiers has no useful effects and should not be set.
	// +optional
	Modifiers []string `json:"modifiers,omitempty"`
}

type ListOpts struct {
	Filters map[string]string `json:"filters,omitempty"`
}
